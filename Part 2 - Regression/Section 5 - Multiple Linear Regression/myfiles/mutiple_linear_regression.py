#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Fri May 11 11:53:47 2018

@author: dlog
"""

# Using multiple linear regression we build a model to check which circumastances made startups more profitable.
# Independent variables are: R&D costs ($), administration costs ($), marketing costs ($), geographical area.
# The dependent variable is profit ($) of the startup company.

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


#####################################################################
# import and split data
#####################################################################
dataset = pd.read_csv('../50_Startups.csv')
X = dataset.iloc[:,0:4].values # independent vars
Y = dataset.iloc[:,4].values # dependent vars


#####################################################################
# Encoding categorical vars (strings into integers)
#####################################################################
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X = LabelEncoder()
X[:,3] = labelencoder_X.fit_transform(X[:,3]) # the integer encoding will be assigned in alphabetical order
onehotencoder = OneHotEncoder(categorical_features = [3])
X = onehotencoder.fit_transform(X).toarray() # transform integer encoded rows to individual columns 
# There were 3 categorical vars, let's remove 1 of them to fit into multiple linear regression
X = X[:,1:] # remove column in index 0


#####################################################################
# Splitting data to training and test sets
#####################################################################
from sklearn.cross_validation import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0) # the split in X and Y is done on corresponding index values


#####################################################################
# fit multiple linear regression model to training set
#####################################################################
from sklearn.linear_model import LinearRegression
regressor = LinearRegression() 
regressor.fit(X_train, Y_train)


#####################################################################
# predict test set results
#####################################################################
Y_pred = regressor.predict(X_test)

# There is a good relationship between the independent vars (various costs and location) and the 
# profit generated by a startup. 


#####################################################################
# Try backward elimination to find optimal model
#####################################################################

# STEP 1: add constant
# Formula for MLR: y = b0 + (b1*x1) + (b2*x2) + ... + (bn*xn)  where n is the number of independent vars
# The data has to contain the first element b0=1 to fit into MLR formula. We'll add this as new feature column populated with 1's:
import statsmodels.formula.api as sm
X = np.append(arr = np.ones((50,1)).astype(int), values = X, axis = 1)

# STEP 2: fit model
# build matrix of features that are most optimal
X_opt = X[:, [0,1,2,3,4,5]]
regressor_OLS = sm.OLS(endog = Y, exog = X_opt).fit() # Fit the full model with all possible predictors
regressor_OLS.summary()
'''results: 
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const       5.013e+04   6884.820      7.281      0.000    3.62e+04     6.4e+04
x1           198.7888   3371.007      0.059      0.953   -6595.030    6992.607
x2           -41.8870   3256.039     -0.013      0.990   -6604.003    6520.229
x3             0.8060      0.046     17.369      0.000       0.712       0.900
x4            -0.0270      0.052     -0.517      0.608      -0.132       0.078
x5             0.0270      0.017      1.574      0.123      -0.008       0.062
==============================================================================
''' #Comments: from the table above, x2 has highest P-value so let's eliminate it and re-fit the model


# STEP 3: re-fit model
X_opt = X[:, [0,1,3,4,5]]
regressor_OLS = sm.OLS(endog = Y, exog = X_opt).fit() # Fit the full model with all possible predictors
regressor_OLS.summary()
''' results:
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const       5.011e+04   6647.870      7.537      0.000    3.67e+04    6.35e+04
x1           220.1585   2900.536      0.076      0.940   -5621.821    6062.138
x2             0.8060      0.046     17.606      0.000       0.714       0.898
x3            -0.0270      0.052     -0.523      0.604      -0.131       0.077
x4             0.0270      0.017      1.592      0.118      -0.007       0.061
==============================================================================    
''' #Comments: from the table above, x1 has highest P-value so let's eliminate it and re-fit the model


# STEP 4: re-fit model
X_opt = X_opt[:, [0,2,3,4]]
regressor_OLS = sm.OLS(endog = Y, exog = X_opt).fit() # Fit the full model with all possible predictors
regressor_OLS.summary()
''' results:
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const       5.012e+04   6572.353      7.626      0.000    3.69e+04    6.34e+04
x1             0.8057      0.045     17.846      0.000       0.715       0.897
x2            -0.0268      0.051     -0.526      0.602      -0.130       0.076
x3             0.0272      0.016      1.655      0.105      -0.006       0.060
==============================================================================  
''' #Comments: from the table above, x2 has highest P-value so let's eliminate it and re-fit the model


# STEP 5: re-fit model
X_opt = X_opt[:, [0,1,3]]
regressor_OLS = sm.OLS(endog = Y, exog = X_opt).fit() # Fit the full model with all possible predictors
regressor_OLS.summary()
''' results:
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const       4.698e+04   2689.933     17.464      0.000    4.16e+04    5.24e+04
x1             0.7966      0.041     19.266      0.000       0.713       0.880
x2             0.0299      0.016      1.927      0.060      -0.001       0.061
============================================================================== 
''' #Comments: from the table above, x2 has highest P-value so let's eliminate it and re-fit the model


# STEP 5: re-fit model
X_opt = X_opt[:, [0,1]]
regressor_OLS = sm.OLS(endog = Y, exog = X_opt).fit() # Fit the full model with all possible predictors
regressor_OLS.summary()
''' results:
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const       4.903e+04   2537.897     19.320      0.000    4.39e+04    5.41e+04
x1             0.8543      0.029     29.151      0.000       0.795       0.913
==============================================================================
''' # Comments: The only variable left with p-value < 0.05 is x1, x1 corresponds to 
    # variable 'R&D Spend' from the original data table. Therefore the model shows there is a strong
    # correlation between R&D expenditure and the profit generated by a startup.


